// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME/endpoints.gotemplate (4.801kB)
// NAME/handlers.gotemplate (62B)
// NAME/middlewares.gotemplate (75B)
// NAME/transport_grpc.gotemplate (2.922kB)
// NAME/transport_http.gotemplate (106B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _endpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcf\x6f\xdb\xb8\x12\x3e\x4b\x7f\xc5\xd4\xc8\x43\xec\x42\x91\xef\x29\x7c\x78\x68\xf3\xde\x0b\xd0\xa6\x0f\x4d\x76\xf7\x50\x14\x05\x2d\x8d\x6d\x22\x14\xa9\x92\x94\x7f\xac\xe0\xff\x7d\x31\x24\x25\xd1\xb1\x92\x66\xf7\xb8\xd8\x43\x90\x84\x22\x67\xbe\xf9\xe6\x9b\xe1\x70\x3e\x87\xf7\xaa\x44\x58\xa3\x44\xcd\x2c\x96\xb0\x3c\x80\xd5\x8d\x31\x39\x7c\xf8\x0c\x77\x9f\x1f\xe0\xe6\xc3\xed\x43\x9e\xce\xe7\xf0\x05\x75\x23\x25\x97\x6b\xbf\x01\x76\x5c\x08\x50\x5b\xd4\x3b\xcd\x2d\x82\xdd\x70\x03\x2b\x2e\xd0\x6d\xfe\x15\xb5\xe1\x4a\x5e\x43\xdb\xe6\xe1\xef\xe3\x31\xfa\x00\x1f\x98\xc5\xf8\x2b\xfd\x7f\x3c\xa6\x69\xcd\x8a\x47\xb6\x46\x68\xdb\x07\xf5\x51\xed\x50\x43\x7e\x8f\x7a\xcb\x0b\xcc\xef\x58\xe5\xb6\xcc\xe7\xf0\xd0\x39\x83\x42\x49\xcb\xb8\x34\x50\xa1\xdd\xa8\xd2\x80\x55\x50\xb1\x47\x04\x2e\x4b\xbe\xe5\x65\xc3\x04\xa0\x2c\x6b\xc5\xa5\x35\xb0\xd2\xaa\x02\xe3\xed\x99\x8c\x2c\x69\xfc\xd1\xa0\xb1\xc0\x64\x09\x1a\x4d\xad\xa4\x41\xb0\x87\x1a\x9d\x25\xda\x4a\xa1\x29\x83\x83\x95\x0c\x98\x81\x1d\x0a\x41\xbf\x51\x16\xaa\x44\x6d\xc8\x00\xd9\x2b\x31\xfc\xbf\x52\x3a\x1c\x74\xd6\x32\xb7\xc0\x88\xb2\x15\xa8\x46\x83\x69\xea\x5a\x69\xa2\xdc\x6a\x26\x0d\xfd\x4d\xee\x38\x13\xfc\x77\x66\xb9\x92\x64\x6d\xa5\x74\xc5\xac\xc9\xd3\x94\x57\x6e\xc7\x34\x4d\x26\xab\xca\x4e\xd2\x64\x42\x91\xe3\xde\x4e\xd2\x34\x99\xac\xb9\xdd\x34\xcb\xbc\x50\xd5\x7c\xad\xae\x1e\xb9\x9d\xd3\x4f\x87\x78\x92\xce\x1c\x6b\x37\x3d\x0f\x85\x12\x02\x0b\x6b\x3a\x40\x76\x13\xc5\x07\x76\xc3\x2c\x14\xaa\xaa\x09\x3d\x93\xc0\xca\xb2\x23\x2d\x87\x5b\x7b\x69\xc8\x58\x85\x4c\x5a\xe2\x68\x89\xd0\x18\x2c\x89\x0c\x06\x1b\x14\x35\x6a\x30\x56\x37\x85\xcd\xe8\x73\x70\x35\xee\x89\x4b\xab\x80\x91\x39\xc3\xe5\x5a\x20\xd4\x4c\xb3\x0a\x2d\x6a\x52\x11\xad\xdf\x4a\x60\x3e\x0d\x3a\x03\x6e\x2f\x0d\x39\x5b\x35\xc2\xd1\xb9\x6a\x64\x41\x54\x05\xc8\x12\x89\x4d\x05\xaa\x76\x62\x06\x45\x67\x6b\xd4\x57\x9d\x43\x32\xb8\x64\x86\x9b\x1c\xfe\xa3\x34\xe0\x9e\x55\xb5\xc0\x0c\x0e\xaa\x81\x8a\xaf\x37\x16\x6a\x66\x28\x95\x11\x55\x04\xb0\x77\xe4\xfd\xd4\x5a\x95\x4d\x81\x8e\x06\x26\x61\x63\x6d\x9d\xff\x8f\xc9\x52\x10\xc6\x1d\xb7\x1b\x40\x56\x6c\x82\x22\x61\xda\x79\x9f\xc1\x8e\x6b\x2c\xa1\xa9\xbd\x51\x53\x63\xc1\x57\xbc\x80\x9a\xd9\x4d\x0e\xd3\x5b\x87\x8f\x1b\xb2\xbf\x64\x4b\x71\x00\x06\x15\x37\xd6\xab\x19\x4a\x34\x7c\x2d\xe9\x28\x97\x5b\xf5\x88\x8e\xca\x50\x1b\xbd\xfa\x1d\x44\x3c\x4d\xb6\x4f\x06\x99\xe8\x98\xcc\x67\x31\xbb\x85\xe0\x28\xed\x29\xbb\x51\xe2\x86\x42\x12\x07\x2a\x37\x6f\x0e\xcb\x97\xd2\x48\x92\xf7\x5c\x71\x62\xb8\x42\x2f\xab\x01\x2f\x97\x16\xf5\x8a\x91\xa0\xc6\x33\x41\xc6\x7a\x67\xe3\xc5\xdc\x18\xdf\x8c\x42\xf5\xcc\x5d\x1e\xee\x70\xf7\x3e\xc4\x53\xa8\x6a\xc9\xa5\xe3\xa9\x0a\x10\xa3\xc4\x66\xa1\xe4\x6d\xa3\x25\x70\xa7\x64\x02\x58\x30\x21\x50\x7b\x31\x77\x8d\x27\x75\xe1\x9c\x11\xda\xa6\x6d\xab\x99\x5c\x23\x5c\x70\xb8\x5e\x0c\x8d\xea\x93\x4f\xc6\xf1\x98\x26\x6d\x7b\xc1\x43\xe3\xea\xce\x03\x40\x1f\x44\xde\x2d\xa6\x6d\x7b\x45\xab\xc7\x63\x7a\x4c\x53\x92\x1b\xdc\xe1\xae\x77\x39\x0d\xe5\x47\x0d\xf3\xb4\x1d\xde\xbb\x84\xce\x22\x74\x6d\x9a\xcc\xe7\xf0\x9b\x66\x75\xcf\xb6\xd3\x64\xc5\xcb\x52\xe0\x8e\x69\x34\x39\xdc\x23\x9e\x2c\xac\x55\x4a\xb8\x3a\x37\x0b\x77\x3e\x1c\xef\x9c\xcf\x52\x67\xb9\x8f\xa3\x54\x15\xe3\x32\x4f\x93\x2d\xd3\xd4\x98\x5e\x66\x03\xae\x88\x8f\x64\xe8\xeb\xe7\xc4\x2c\xe0\x13\x7b\xc4\x11\xca\x06\x04\x49\xdb\x7a\x96\x12\x42\x33\x68\xe1\x7a\x31\x30\xd0\xbe\x1a\xca\x99\xa3\x6b\x22\xe1\x05\x88\x59\x04\xe0\x98\x0e\x44\x1b\xa4\x52\xc1\x32\x4a\xc3\xab\x38\x8f\x22\xf0\x94\x0f\x19\xef\xbf\x50\xa0\x41\xa6\xfd\x5a\x7a\x3c\x6d\xe8\xaf\x50\xa2\xd3\xd4\x34\x92\xf1\x0c\x22\x02\xa6\x85\xdd\x43\xb8\x51\xf2\xf7\xfe\x77\x46\x2d\xe3\x6d\xdb\xfe\x57\xd1\x1e\x22\xe3\x8b\xbf\x2c\x1f\x0e\x75\x27\xbf\x19\x4c\x9f\xec\xf0\x57\x68\xb4\x25\x03\xd4\x5a\xe9\x19\x09\x33\xe9\xae\x58\xb7\x48\x50\x31\x1f\xcb\x77\x61\xf7\xe4\x7d\x96\x26\x09\x5f\xb9\xad\x6f\x16\x20\xb9\x70\x36\x3a\x36\x24\x17\xce\x4c\x9a\x24\xc7\xb4\x5f\xed\x3c\xe4\x3f\x05\x36\xcb\xc8\x04\x25\xb2\xcb\x29\x71\x4a\x12\x3c\x21\xd6\x25\xf2\xc2\xa2\x23\xd6\xd7\x74\xcc\xf5\x85\xc5\x31\xba\x3d\xdf\xcf\xea\x99\xb8\x8f\x0e\x9e\xd6\xf2\x59\x77\x38\x09\x9b\x0c\x8f\xa7\xab\x9b\x65\xfa\xe6\xda\x52\x7e\xfa\xa9\x26\x5a\xf6\xf4\x47\x79\x21\xeb\x3f\x28\x9c\x60\xe3\x8c\xbd\xb3\xc4\xbb\x43\xdb\x3e\x8f\x26\x7f\xa2\x26\x07\xc7\xef\x1a\x49\xe1\x58\x12\x7d\x1a\xfb\x2f\xdb\x90\x1e\xbf\x7c\x1c\x2a\x2f\xce\x16\xd5\xcc\xbf\x85\xb8\xd9\x17\x58\x5b\xd8\x69\x56\x1b\x7f\xf9\xf6\xd4\xad\x38\x8a\x92\x26\x8f\xd0\xb5\x9f\x54\xa8\xbb\xb5\x46\x66\xa6\xfc\x53\x5f\xa9\x6e\xa0\xfd\xc5\x74\x23\x2e\x8d\x71\x75\x2d\x0e\x74\xf9\xd0\x85\x6a\xc9\x78\x54\xd7\x74\x93\xe0\x16\xf5\xa1\xcf\x23\xd5\x11\xdd\x2d\xdd\x0c\x45\xf6\x3e\xd7\x34\x4f\xd0\x9d\x9a\x45\x57\x5a\xc1\x24\xcd\x53\x34\x85\x60\x49\xc7\x96\x07\x90\x94\x03\x3f\x67\xe1\xbe\x10\x4d\x89\xa5\x9f\x63\x97\x48\x10\x28\xe6\x1a\xcb\xfc\x8c\x8d\xe9\x80\x29\x83\xc9\xbd\x65\xb6\x31\x93\x0c\x26\xff\xe7\x72\x3d\x99\xa5\x5d\x3f\x78\x1b\x35\x84\xe7\xce\xc3\x08\x2b\xd9\x80\x26\xcf\x73\x63\x35\x97\x6b\xa7\x25\x2e\xc3\xf2\xf5\x02\x2a\x56\x7f\xf5\x9f\xbe\x79\xfa\xdb\x63\xeb\x3a\xef\x15\xfc\xac\x5f\x25\xc9\x24\x52\xd4\xe4\x1a\x7a\x03\xc7\x2c\x98\x88\x1a\x31\x65\xe5\x3b\x41\x72\x1a\x76\xa6\x7b\x78\xad\xef\x22\xdf\x33\x50\x8f\xf4\xb9\x03\xf8\x15\xf7\xdf\xde\xc1\x1b\xf5\xe8\x25\x59\x33\xc9\x8b\xe9\xaa\xb2\xf9\x7d\xad\xb9\xb4\xab\xe9\xe4\xa6\x33\xd1\x67\xf2\xf2\x5f\xe6\x12\x4a\x85\x06\xa4\xb2\x80\x7b\x6e\xec\x3b\x30\xa7\x8d\xbd\xd7\x10\xb5\xf8\x09\x81\x9a\xcd\x42\x8f\x2a\x51\xa0\xc5\x69\x87\xc0\x7d\x1b\x02\xe0\xb2\xc8\xe0\xfb\x10\x41\xcf\xe4\xeb\x39\xe3\x2b\x3a\x05\x8b\x05\x9c\xb0\x17\x8a\x6e\xb4\xd9\xc2\x22\x02\x3f\x1d\xdd\x32\xeb\xaa\xf0\x84\x75\x5f\x81\x1f\xd9\x12\x05\x96\x83\x30\xfc\xc3\x70\x8d\xb6\x93\x71\x3c\xf2\x7b\x35\xef\x36\x28\xfb\xaf\x2a\x52\x6e\x30\xe6\x05\x98\xf9\x82\x0b\x35\xd1\xf8\xcd\xe0\x5f\x9b\xcc\x3f\x59\x79\x41\x93\xaf\xe6\x85\x7f\x92\x44\x18\x36\xbc\xd8\xb8\xa3\x06\xe5\x18\x84\x30\xee\x85\xd3\xdd\xb0\xab\x74\x18\xf6\xce\xa3\x72\x6d\xd7\x6b\x39\x3b\xef\xd0\x23\x4d\x3b\x7d\x2e\xae\xbf\xdc\xa6\xce\x40\x65\x21\x4e\xc7\xb8\xc6\x02\xf9\xd6\x3f\x0b\x5c\x88\x4f\x5e\x5b\x6e\x00\xe9\xcd\x44\x56\xc2\x64\xe2\x5f\x2b\x7d\x0b\x20\xa0\x24\xca\x12\x2d\xe3\xc2\xbd\x2c\xba\x8a\x72\x2f\xd3\xf0\x22\x62\x82\xdb\x43\xfe\x52\x37\x39\x89\x3d\x6e\x2a\x7f\x9a\xd1\x7f\x5a\xce\xdf\xb2\xe5\x9c\x1c\xcb\xc6\x27\xc2\xe7\x3a\xd0\x1f\x01\x00\x00\xff\xff\x26\x52\x48\xd6\xc1\x12\x00\x00")

func endpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_endpointsGotemplate,
		"endpoints.gotemplate",
	)
}

func endpointsGotemplate() (*asset, error) {
	bytes, err := endpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "endpoints.gotemplate", size: 4801, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0x90, 0x8f, 0x37, 0x87, 0xb, 0x41, 0xa7, 0xb2, 0xb5, 0xed, 0x91, 0x56, 0xa5, 0x25, 0xd0, 0xd3, 0x84, 0x43, 0x39, 0x39, 0x90, 0x53, 0xa3, 0x6e, 0xce, 0xc4, 0xbc, 0x70, 0xe2, 0x23, 0xa9}}
	return a, nil
}

var _handlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersGotemplate,
		"handlers.gotemplate",
	)
}

func handlersGotemplate() (*asset, error) {
	bytes, err := handlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _middlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x02\x21\x0c\x05\xd0\xbd\xa7\xe8\x9a\x44\x7b\x18\x4f\x40\xec\xb7\x12\x81\x4e\xda\x4e\x66\x41\xb8\xfb\xbc\xb5\xb8\xd0\x1b\x20\xb5\x67\xfa\x19\xc1\x8a\xa9\xf6\x6f\xc9\xbf\x3a\xa5\xc3\x83\x13\xe3\xe8\x35\x11\x3c\x9a\x48\xc7\x55\x1d\xf1\x52\xa3\xaf\x39\x7d\x4c\x40\x85\xf7\x7e\xdc\x01\x00\x00\xff\xff\xcf\x9e\xe9\x81\x4b\x00\x00\x00")

func middlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_middlewaresGotemplate,
		"middlewares.gotemplate",
	)
}

func middlewaresGotemplate() (*asset, error) {
	bytes, err := middlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "middlewares.gotemplate", size: 75, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xfe, 0x9d, 0x1a, 0xaf, 0x47, 0xe8, 0x97, 0x82, 0x24, 0x50, 0x17, 0xb4, 0x49, 0x73, 0x3b, 0x68, 0xb7, 0xe5, 0x3a, 0x3d, 0xb6, 0x15, 0x9d, 0xb1, 0x8f, 0xc4, 0x27, 0xaf, 0xa7, 0x3c, 0xc1}}
	return a, nil
}

var _transport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\x6a\x2c\x0a\x6b\xe1\x50\x3d\x07\xc8\xa5\x49\xba\x59\xb4\xf9\x40\x6a\x6c\x0f\x8b\xc5\x82\x91\xc6\x12\x61\x89\x54\x48\xca\x89\x4b\xf8\xbf\x2f\x86\xfa\xb0\x62\x3b\x76\x0e\x06\x2c\xf2\x71\x3e\xde\x7b\x1c\x29\x49\xe0\x52\x67\x08\x39\x2a\x34\xc2\x61\x06\x4f\x6b\x70\xa6\xb1\x96\xc3\xd5\x3d\xdc\xdd\xcf\xe1\xfa\xea\xeb\x9c\xb3\x24\x81\x47\x34\x8d\x52\x52\xe5\x2d\x00\x5e\x64\x59\x82\x5e\xa1\x79\x31\xd2\x21\xb8\x42\x5a\x58\xc8\x12\x03\xf8\x1b\x1a\x2b\xb5\x3a\x07\xef\x79\xf7\x7f\xb3\x19\x6d\xc0\x95\x70\x38\xde\xa5\xe7\xcd\x86\xb1\x5a\xa4\x4b\x91\x23\x78\x3f\xd7\xff\xe8\x17\x34\xc0\xff\x45\xb3\x92\x29\xf2\x3b\x51\x05\x48\x92\xc0\xbc\x4f\x06\xb5\xd1\x2b\x99\xa1\x05\x8b\x66\x85\xe6\xcc\xca\x0c\xe1\x49\xaa\x4c\xaa\xdc\xc2\x42\x1b\x70\x05\x42\xfe\xf8\x70\x09\xce\x08\x65\x6b\x6d\x5c\xa8\xf0\xab\x83\xc6\xc9\x52\xfe\x8f\x36\x40\x86\xdd\x24\x37\x75\x1a\x92\xa2\xe1\x8c\xc9\x8a\x16\x61\xca\xa2\x89\x42\x97\x14\xce\xd5\x13\x16\x4d\x52\xad\x1c\xbe\xba\x09\x63\xd1\x24\xd7\x3a\x2f\x91\xe7\xba\x14\x2a\xe7\xda\xe4\x21\x44\x52\xa1\x13\x99\x70\x82\x30\xb4\x30\x64\x80\x49\x2e\x5d\xd1\x3c\xf1\x54\x57\x49\xae\xcf\x96\xd2\x25\xf4\x7b\x5b\xc2\x84\xc5\xa1\xd7\x5b\xb1\xc4\x2f\x8f\x0f\x97\x6d\x45\x50\x89\x25\x5a\x10\x60\xd1\x81\x5e\x00\xaa\xac\xd6\x52\x39\x0b\x62\x25\x64\x29\x9e\x4a\x04\x41\xfb\xa1\x65\xef\x77\xd8\xeb\xdb\x5a\x34\x2a\xdd\x89\x3c\xdd\x86\xba\xee\xff\xcd\x40\xd7\x4e\x6a\x65\x81\x73\xfe\xa6\x87\x8e\xa0\xfb\xb0\x1d\xbf\x97\x08\x3c\x8b\xec\x08\x68\xe1\xfc\x02\xbe\xff\x78\x3f\x92\x67\x51\x74\x68\xf7\x4f\x5c\x68\x83\xd3\x9e\xd2\xb9\xbe\x6c\xf9\x8f\x67\x2c\xda\xec\xe6\xb8\x00\x51\xd7\xa8\xb2\xe9\x9b\xe5\xa1\x17\xce\x79\xcc\x22\x83\xae\x31\x0a\x7e\xa7\x6c\x6d\x0e\xcf\xa2\x24\x01\xef\xe1\xa0\xf3\x60\xb3\x61\x91\xf7\x46\xa8\x1c\xe1\x93\xa4\x46\x86\xfd\x5b\x74\x85\xce\x2c\x21\xa2\xad\x71\x3f\xc9\x8e\x8b\x73\x78\xdb\xd2\x1d\xbe\x74\x94\xb3\x28\x8a\x06\xda\xb9\xf7\xc3\x91\x5e\x81\x19\x21\xae\x30\xd5\x59\x50\x6a\x84\x78\xc4\xe7\x06\x6d\x0b\xb8\x56\x07\x01\xb6\xd6\xca\x62\x40\xbc\x61\x82\x73\x4e\x8b\xc4\x9d\xf7\x67\x64\x21\xaa\x7c\xc3\xda\xbb\xb5\x25\x04\x64\x55\x97\x58\x21\x59\x82\xae\x88\xf7\x5f\x74\xa0\xe2\xb0\xd6\x52\x39\x34\x0b\x91\x22\x73\xeb\x1a\xc7\x71\xac\x33\x4d\xea\xc0\xb3\xd3\xfc\x1d\xa0\x0f\x60\x87\xbf\x1b\xa1\xb2\x12\x0d\xdb\x16\xdf\x56\xde\x85\x09\xb7\x7e\x94\xdd\xe9\x6d\x23\x1f\xef\xe1\x64\xa9\xe1\x0a\x4d\x2d\x7c\xde\xa6\x8a\xb7\xe1\x87\xea\xa7\xa9\x7b\x85\x6e\x5a\xf0\xce\xb5\x33\x30\xf8\x0c\x9f\xc7\xe0\x4e\xce\xf9\xba\xee\x2b\x8a\x61\xba\x83\x68\xf5\x1c\x41\x66\x80\xc6\x68\x4a\xcb\xa2\x9f\x14\xb4\x0e\x2b\x54\x30\xb9\x69\x8f\xc9\xf6\x32\x91\x4f\xa8\xaa\x50\x45\xcc\x22\xb9\x08\x87\x7e\xbb\x00\x25\x4b\x0a\xd5\xdf\x0d\x25\xcb\x10\x2f\x5c\xb1\x6e\xcd\x60\xcd\x4f\xd6\x15\xcf\xe8\x2c\xdb\x30\xef\x5b\x7d\x48\x9d\x8e\xe1\xd6\xcc\xa7\xe9\x4d\x12\x38\xe6\x7b\x90\x34\xe4\x76\x86\x76\x7b\xa0\x43\xfc\x45\xfa\xb8\x42\x38\x62\x7f\x85\x86\x46\x64\xf0\x77\x3b\x18\xf7\x6d\x66\xba\xc8\x4e\x83\x80\xc6\xa2\x39\xcb\x74\x25\xa4\x3a\x06\xe6\xf0\x60\x64\x25\x8c\x2c\xd7\x74\x64\xd1\x94\x20\x55\x98\xce\xa3\x39\x7b\xac\x8f\xe9\xcf\x7d\x73\x50\x2f\x8f\xf8\xbc\x35\xa3\x27\x33\x8c\x9e\xc6\xba\x93\x93\xce\x2f\xfa\x33\x7b\xda\xec\xb9\x6a\xa4\xe4\xf3\x11\x99\xda\x91\xf2\x21\x99\x8e\x4e\x9f\x83\x3a\xb5\x27\x7a\xc8\x7b\x42\x9d\x96\xa0\x4b\x11\x04\x3b\x22\x6b\x5d\xae\x3f\xa4\xd3\xd1\x46\x0e\x09\x35\x54\xf0\x41\xa5\x6c\x4d\x2c\xf6\xa7\x3e\x70\x8f\x46\x62\xd9\xfa\x90\x5a\x37\x58\xd6\x68\x2c\x6b\x1b\xd8\x7b\x3d\x1e\x1e\x3e\x55\x36\x20\xf9\xed\x55\xbc\x0b\xa0\x5a\x69\x84\x2e\x67\xb0\x0a\xf5\x06\x07\x54\x59\x18\x0d\x72\x01\xab\xf1\xa8\x88\xc2\xd7\x18\xc2\x12\xd7\x41\xea\x2c\xa3\x8f\x48\xed\x0a\xe2\xb7\xcf\x42\x13\xb9\x12\x0e\xa6\xcb\x18\x5e\x0a\x99\x16\x01\x5a\x96\x50\x92\x56\x5d\x14\xa1\xb2\xf0\x96\xa1\x2f\x2c\x7e\x29\x94\x56\x32\x15\xe5\x0d\x8a\x0c\xcd\xdf\xb8\xa6\x8f\x1d\xd7\x25\xb2\xba\xf5\x8b\x74\x90\x0a\x05\x4f\xd8\x87\x48\x53\xb4\x16\x33\xca\x8d\xd2\x15\x68\xba\xcc\xb4\x4f\x54\x5c\x0c\xbd\xfe\x27\x5d\xf1\x4d\x94\x0d\xb6\x93\x90\x7a\xfd\xfe\xc7\x8f\xf8\x24\xf0\x9d\xea\xa6\xcb\x78\x1b\x21\xbc\x4c\x07\xe9\x52\xf7\xca\x36\xec\x57\x00\x00\x00\xff\xff\xd6\x51\x23\xd8\x6a\x0b\x00\x00")

func transport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_transport_grpcGotemplate,
		"transport_grpc.gotemplate",
	)
}

func transport_grpcGotemplate() (*asset, error) {
	bytes, err := transport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transport_grpc.gotemplate", size: 2922, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x21, 0x86, 0x65, 0x7e, 0xba, 0xdd, 0x5, 0xbb, 0xe, 0x3d, 0xe4, 0xf1, 0x64, 0x6b, 0xa2, 0x8d, 0x80, 0x91, 0xd3, 0x5, 0x72, 0x1b, 0xc5, 0xbf, 0x11, 0x80, 0x4, 0xdc, 0x25, 0x4e, 0x4}}
	return a, nil
}

var _transport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func transport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_transport_httpGotemplate,
		"transport_http.gotemplate",
	)
}

func transport_httpGotemplate() (*asset, error) {
	bytes, err := transport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "transport_http.gotemplate", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x56, 0xc6, 0xb4, 0xe5, 0x1f, 0xf4, 0x1d, 0xa5, 0xda, 0x23, 0xea, 0x8f, 0xfb, 0xff, 0xae, 0x4b, 0x12, 0xe4, 0xf6, 0xbf, 0x11, 0xa6, 0x4, 0x83, 0x53, 0xfd, 0xbf, 0xce, 0x4a, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"endpoints.gotemplate":      endpointsGotemplate,
	"handlers.gotemplate":       handlersGotemplate,
	"middlewares.gotemplate":    middlewaresGotemplate,
	"transport_grpc.gotemplate": transport_grpcGotemplate,
	"transport_http.gotemplate": transport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"endpoints.gotemplate":      &bintree{endpointsGotemplate, map[string]*bintree{}},
	"handlers.gotemplate":       &bintree{handlersGotemplate, map[string]*bintree{}},
	"middlewares.gotemplate":    &bintree{middlewaresGotemplate, map[string]*bintree{}},
	"transport_grpc.gotemplate": &bintree{transport_grpcGotemplate, map[string]*bintree{}},
	"transport_http.gotemplate": &bintree{transport_httpGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
